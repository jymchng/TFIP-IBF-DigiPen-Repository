install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ',
'devtools', 'uuid', 'digest'))
install.packages('IRkernel')
IRkernel::installspec()
q()
## ===============================================================================================
## Understanding Data Visually
## ===============================================================================================
head(input.data)
## Single Numeric Variable
## x axis is Height of bar represents Common name
## ==================================================================
## Continuous Count Histogram
## Discrete Count Bar graph
## Continuous Value Bar graph
## Discrete Value Bar graph
library(MASS)
input.data = Cars93
hist(input.data$Price)
hist(input.data$Price)
hist(input.data$Price)
hist(input.data$Price, main = "Price Histogram", xlab = "Price", ylab = "Count")
hist(input.data$Price, col = rainbow(3), main = "Price Histogram", xlab = "Price", ylab = "Count")
## Single Numeric Variable - Price
price.colors = ifelse(input.data$Price > 25, "blue", "red")
barplot(input.data$Price, col = price.colors)
## Two Numeric Variables - Scatter plot
plot(input.data$Horsepower, input.data$Price, main = "Horsepower Vs Price",
col = rainbow(3), pch = 6, xlab = "Horsepower", ylab = "Price ($)")
## *****************************************
## Using ggplot2 Package
## *****************************************
install.packages("ggplot2")
library(ggplot2)
## qplot syntax
## qplot(x, y, data=, color=, shape=, size=, alpha=, geom=, method=,
## formula=, facets=, xlim=, ylim= xlab=, ylab=, main=, sub=)
qplot(Cylinders, MPG.city, data = input.data) ## Factor Vs Numeric
qplot(MPG.city, Price, data = input.data) ## Numeric Vs Numeric
qplot(input.data$Cylinders) ## Single Factor Variable
table(input.data$Cylinders)
barplot(table(input.data$Cylinders))
## ************************************
## ggplot Histogram - x is continous
## ************************************
ggplot(input.data, aes(x = Price)) ## Created plot space
ggplot(input.data, aes(x = Price)) + ## Added Histogram on plot space
geom_histogram(binwidth = 2)
ggplot(input.data, aes(x = Price)) + ## Draw Histogram with black outline and white fill
geom_histogram(binwidth = 2, colour = "black", fill = "white")
ggplot(input.data, aes(x = Price)) + ## Draw Density Curve
geom_density()
ggplot(input.data, aes(x = Price)) + ## Overlay Histogram with Density Curve
geom_histogram(aes(y=..density..),binwidth = 2, colour = "black", fill = "white") + ## Use Density instead of Count on y-axis
geom_density(alpha=0.2, fill = "#FF6666")
## ************************************
## ggplot Barplot - x is Discrete
## ************************************
ggplot(input.data, aes(x = Type, y=Price)) + ## Simple bar chart
geom_bar() ## Errors because it is not able to identify x-axis values as Factor
ggplot(input.data, aes(x = Type, y=Price)) + ## Simple bar chart
geom_bar(stat = "identity") ## Added stat = "identity"
ggplot(input.data, aes(x = Type, y=Price, fill = Type)) + ## Simple bar chart
geom_bar(stat = "identity", colour = "black") ## Added stat = "identity"
library(dplyr)
mean_price = input.data %>%
group_by(Type) %>%
summarise(Price = mean(Price))
mean_price
ggplot(input.data, aes(x = Type, y=Price, fill = Type)) +
geom_bar(data = mean_price, stat = "identity") +
guides(fill = FALSE) ## Removed Legend (Redundant Information)
## OBSERVATIONS:
## Mean Price of Midsize is higher than Large or Sporty car - does not make sense
## Need to get additional data or flag this as a Problem
gg1 = ggplot(input.data, aes(x = Type, fill = Type)) +
geom_bar(stat = "count", colour = "black") +
guides(fill = FALSE) ## stat = "count" : If you need Count of each Type
gg1
## ************************************
## ggplot: Box Plots
## ************************************
ggplot(input.data, aes(x = Type, y = Price)) + ## Simple Box Plot - Midsize has high variance
geom_boxplot()
ggplot(input.data, aes(x = Type, y = Price, fill = Type)) + ## Coloured Box Plot
geom_boxplot()
ggplot(input.data, aes(x = Type, y = Price, fill = Type)) + ## Coloured Box Plot without Legend
geom_boxplot() +
guides(fill = FALSE)
ggplot(input.data, aes(x = Type, y = Price, fill = Type)) + ## Coloured Box Plot with Flipped Coordinates
geom_boxplot() +
guides(fill = FALSE) +
coord_flip()
## ************************************
## ggplot: Scatter Plots
## ************************************
ggplot(input.data, aes(x = Horsepower, y = MPG.city)) + ## Simple Scatter Plot
geom_point()
ggplot(input.data, aes(x = Horsepower, y = MPG.city, colour = Cylinders)) + ## Simple Scatter Plot
geom_point()
## ************************************
## ggplot: Adding Titles
## ************************************
gg2 = ggplot(input.data, aes(x = Horsepower, y = MPG.city, colour = Cylinders)) + ## Simple Scatter Plot
geom_point() +
ggtitle("Horsepower Vs MPG.city") + ## Add Title
theme(plot.title = element_text(lineheight = 0.8, face = "bold")) ## Set text size and bold face
gg2
## ************************************
## ggplot: Line Graphs
## ************************************
ggplot(input.data, aes(x = Horsepower, y = MPG.city)) + ## Simple Line Graph
geom_line()
ggplot(input.data, aes(x = Horsepower, y = MPG.city)) + ## Add Points
geom_line() +
geom_point()
ggplot(input.data, aes(x = Horsepower, y = MPG.city, colour = Cylinders)) + ## Finer details: Added Cylinders
geom_line() +
geom_point()
## ************************************
## ggplot: Facet_grid and Facet_wrap
## ************************************
ggplot(input.data, aes(x = Horsepower, y = MPG.city)) +
geom_point() +
facet_grid(Cylinders ~ .) ## Separates by Cylinders Horizontally
ggplot(input.data, aes(x = Horsepower, y = MPG.city)) +
geom_point() +
facet_grid(. ~ Cylinders) ## Separates by Cylinders Vertically
ggplot(input.data, aes(x = Horsepower, y = MPG.city)) +
geom_point() +
facet_grid(Cylinders ~ Type) ## Separates by Cylinders and Type
ggplot(input.data, aes(x = Horsepower, y = MPG.city)) + ## Facet_wrap: Arrange in 3 columns
geom_point() +
facet_wrap( ~ Cylinders, ncol = 3)
## *****************************************
## Working with Dates
## *****************************************
## In R, Dates and Times are captured using POSIXct (Continuous Time - Number of seconds) and POSIXlt (List Time)
## Base Date: 1 January 1970
Sys.time()
class(Sys.time())
time.list = as.POSIXlt(Sys.time())
unlist(time.list)
y <- strptime("01/02/2018",format="%d/%m/%Y")
y
class(y)
weekdays(y) ## Find day of the week
y$wday ## Thursday is fourth day of the week
## R is clever with dates!!
start_end_dates = c("2016 2 Mon", "2017 6 Fri", "2018 10 Tue") ## Mon of Week 2, Fri of Week 6 and Tue of Week 10
strptime(start_end_dates, format = "%Y %W %a")
## Difference between two dates
difftime("2014-02-06", "2016-08-15")
as.numeric(difftime("2014-02-06", "2016-08-15"))
## Generating Sequence of dates from 2015-11-04 to 2015-11-15 incrementing by 1 day
dates.seq = seq(as.POSIXlt("2015-11-04"), as.POSIXlt("2015-11-15"), "1 day")
dates.seq
class(dates.seq)
dates.seq1 = seq(as.POSIXlt("2015-11-04"), by = "day", length = 11)
dates.seq1
class(dates.seq1)
## **************
## Plotly: Interactive Graphs
## **************
install.packages("plotly")
library(plotly)
ggplotly(gg1)
ggplotly(gg2)
## Volcano
data("volcano")
class(volcano)
dim(volcano)
str(volcano)
head(volcano)
plot_ly(z=volcano, type = "surface")
## *********************
## Area-Chart
## *********************
# For the weatherAUS dataset.
install.packages("rattle")
library(rattle)
# To generate a density plot.
data(weatherAUS)
names(weatherAUS)
cities = c("Canberra", "Darwin", "Melbourne", "Sydney")
ds = subset(weatherAUS, Location %in% cities & ! is.na(Temp3pm))
p = ggplot(ds, aes(Temp3pm, colour=Location, fill=Location))
p = p + geom_density(alpha=0.55)
p
## Make it Interactive!!
ggplotly(p)
## *********************
## Geographical Maps
## *********************
install.packages("maps")
library("maps")
us_map = map_data("state")
#data()
#help("map_data")
head(us_map)
ggplot(subset(us_map, region %in% c("ohio", "indiana", "kentucky")),
aes(x = long,
y = lat,
fill = region)) +
geom_polygon()
countries_map = map_data("world")
head(countries_map)
gg.map = ggplot(subset(countries_map, region %in% c("India","Sri Lanka", "Bangladesh", "Nepal")),
aes(x = long,
y = lat,
fill = region)) +
geom_polygon()
ggplotly(gg.map)
setwd("D:/OneDrive - Nanyang Technological University/DIGIPEN_TFIP_IBF_LESSONS/Week 8 - Day 5")
## Read Input data
sales = read.csv("sales.csv", header = TRUE)
## Explore Structure and Summary of Input data
str(sales)
summary(sales)
attach(sales)
##  Build Histogram for Store_Sales to understand its distribution
hist(Store_Sales)
Store_Sales_low = Store_Sales[Store_Sales < 500000]
hist(Store_Sales_low)
##  Let us now examine the Numeric Independent variables using the original Sales dataset
names(sales)
hist(Dist_Taxi)
hist(Dist_Market)
hist(Dist_Metro)
hist(Store_Area)      ## Looks Right Skewed - Needs closer examination
boxplot(Store_Area)   ## Seems like one Store is very large compared to others - Outlier again?
hist(Items_Available)       ## Looks Right Skewed
boxplot(Items_Available)    ## Seems like one Store has large number of items - Maybe company Mega Store?
hist(Daily_Customer_Count)
table(Parking)
plot(as.factor(Parking))
table(Coupon_Category)
plot(as.factor(Coupon_Category))
##  To start, let us remove records with missing values
sales_complete = sales[complete.cases(sales),]
nums <- unlist(lapply(sales_complete, is.numeric))
boxplot(sales_complete[,nums] , col = "green", main = "Box Plot for Store Sales")
##  Hard to read the plot - One high Store_Sales value hurting the scale
##  Let us replot without this high sales store
sales_complete_2 = subset(sales_complete, sales_complete$Store_Sales < 500000)
boxplot(sales_complete_2[,nums])
attach(sales_complete_2)
plot(sales_complete_2[,c(2:6, 9:10)])    ## Excluded Observation and Categorical variables
cor(sales_complete_2[,c(2:6, 9:10)])
boxplot(sales_complete_2[,c(2:6,9:10)], col = "orange", main = "Box Plot for Store Sales")
boxplot(scale(sales_complete_2[,c(2:6,9:10)]), col = "orange")
names(sales_complete_2)
boxplot(Store_Sales ~ Coupon_Category,
xlab= "Coupon_Category",ylab="Store Sales",
main="Store Sales by Coupon Category",col=c("Orange","blue","grey"))
boxplot(Store_Sales ~ Parking,
xlab= "Parking",ylab="Store Sales",
main="Store Sales by Parking",col=c("Red", "Orange","blue","grey"))
library(mice)
library(VIM)
## First let us understand the missing values pattern using the function md.pattern
md.pattern(sales)
help(md.pattern)
## Let us plot the above information
sales_miss = aggr(sales, col=mdc(1:3), numbers=TRUE, sortVars=TRUE,
labels=names(sales), cex.axis=.7, gap=3,
ylab=c("Proportion of missingness","Missingness Pattern"))
mice_imputes = mice(sales, m = 5, maxit = 7)   ## m: Number of times model should run, maxit: Max number of iterations
## Let us plot the above information
sales_miss = aggr(sales, col=mdc(1:3), numbers=TRUE, sortVars=TRUE,
labels=names(sales), cex.axis=.7, gap=3,
ylab=c("Proportion of missingness","Missingness Pattern"))
library(mice)
library(VIM)
## First let us understand the missing values pattern using the function md.pattern
md.pattern(sales)
help(md.pattern)
## Let us plot the above information
sales_miss = aggr(sales, col=mdc(1:3), numbers=TRUE, sortVars=TRUE,
labels=names(sales), cex.axis=.7, gap=3,
ylab=c("Proportion of missingness","Missingness Pattern"))
mice_imputes = mice(sales, m = 5, maxit = 7)   ## m: Number of times model should run, maxit: Max number of iterations
names(mice_imputes)
## Methods mice used for imputing
mice_imputes$method
## Now let us first examine the values mice determined for Dist_Taxi
mice_imputes$imp$Dist_Taxi
## Before inserting the values, let us look at rows 50, 161 and 207 - They all have missing values
sales[c(50,161,207),]
## Impute Data
imputed_data = complete(mice_imputes, 5)
## Let us look at the same rows 50, 161 and 207
imputed_data[c(50,161,207),]
## Has the imputed value changed the Descriptive Statistics?
summary(sales$Dist_Taxi)
summary(imputed_data$Dist_Taxi)
summary(sales$Dist_Market)
summary(imputed_data$Dist_Market)
summary(sales$Store_Area)
summary(imputed_data$Store_Area)
summary(sales$Items_Available)
summary(imputed_data$Items_Available)
## Create Density plot - Each red line represents an imputed value, should be similar to the blue line
densityplot(mice_imputes)
detach(sales)
## ****************************************************************************************************
